<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessDenied" xml:space="preserve">
    <value>You are not authorized for this operation.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Available commands:
/help - this message
/inventory - list of NFTs you own
/settings - notification settings
/rules - notification rules</value>
  </data>
  <data name="Inventory_AccountNotFound" xml:space="preserve">
    <value>Sorry, account `{0}` is not watched.</value>
  </data>
  <data name="Rules_Add_WrongArguments" xml:space="preserve">
    <value>Wrong arguments. Send /rules_help for help</value>
  </data>
  <data name="Rules_Delete_NotFound" xml:space="preserve">
    <value>Can't delete rule `{0}` - rule not found.</value>
  </data>
  <data name="Rules_Delete_Ok" xml:space="preserve">
    <value>Rule `{0}` deleted.
Send /rules to see actual list.</value>
  </data>
  <data name="Rules_Delete_WrongArguments" xml:space="preserve">
    <value>Wrong arguments. Correct syntax:
`/rules del &lt;rule id&gt;`</value>
  </data>
  <data name="Rules_Help" xml:space="preserve">
    <value>Manage your watch rules:
`/rules` - list all your rules
`/rules add &lt;param1&gt; &lt;param2&gt;...` - add new rule (see params below)
`/rules del &lt;rule id&gt;` - delete rule #id
`/rules help` - this message

Allowed params for "rules add":
`min-mint`=&lt;X&gt;, `max-mint`=&lt;X&gt; - filter by mint
`min-card`=&lt;X&gt;, `max-card`=&lt;X&gt; - filter by card number (cardId field value)
`min-price`=&lt;X&gt;, `max-price`=&lt;X&gt; - filter by price (in WAX)
`rarity`={ common | uncommon | rare | epic | legendary } - filter by rarity
`ignore` - do NOT notify when matched, when if other rule matches

Examples:
1) Notify about 'rare' cards with number 30 or earlier, with price 300 or less:
`/rules add rarity=rare max-card=30 max-price=300`

2) Notify about all cards with mint=119:
`/rules add min-mint=119 max-mint=119`</value>
  </data>
  <data name="Rules_None" xml:space="preserve">
    <value>You have no rules. Read /rules_help to create one.</value>
  </data>
  <data name="Rules_TooMany" xml:space="preserve">
    <value>You have enough rules, you can't add more.</value>
  </data>
  <data name="Rule_Add_Ok" xml:space="preserve">
    <value>Rule `{0}` was added.
Send /rules to see full list.</value>
  </data>
  <data name="Settings_Changed" xml:space="preserve">
    <value>Changed.</value>
  </data>
  <data name="Settings_Invalid" xml:space="preserve">
    <value>Wrong 'set' command format. Ask /settings for list of available commands.</value>
  </data>
  <data name="Users_Add_Success" xml:space="preserve">
    <value>Account {0} added to user {1}. Send /users to see full list.</value>
  </data>
  <data name="Users_Add_WrongArguments" xml:space="preserve">
    <value>Wrong arguments. Correct syntax:
`/users add &lt;wax account&gt; &lt;telegram id&gt;`</value>
  </data>
  <data name="Users_Disable_NotFound" xml:space="preserve">
    <value>Account `{0}` is not found.</value>
  </data>
  <data name="Users_Disable_Success" xml:space="preserve">
    <value>Account `{0}` deactivated.</value>
  </data>
  <data name="Users_Disable_WrongArguments" xml:space="preserve">
    <value>Wrong arguments. Correct syntax:
`/users disable &lt;wax account&gt;`</value>
  </data>
  <data name="Users_Enable_NotFound" xml:space="preserve">
    <value>Account `{0}` is not found.</value>
  </data>
  <data name="Users_Enable_Success" xml:space="preserve">
    <value>Account `{0}` activated successfully.</value>
  </data>
  <data name="Users_Enable_WrongArguments" xml:space="preserve">
    <value>Wrong arguments. Correct syntax:
`/users enable &lt;wax account&gt;`</value>
  </data>
  <data name="Users_Help" xml:space="preserve">
    <value>Manage registered users:
`/users` - list all users
`/users add &lt;wax account&gt; &lt;telegram id&gt;` - add new user or remap to different TelegramId
`/users enable &lt;wax account&gt;` - enable user
`/users disable &lt;wax account&gt;` - disable user
`/users help` - this message</value>
  </data>
  <data name="YouAreDisabled" xml:space="preserve">
    <value>Sorry, your account is disabled.</value>
  </data>
  <data name="YouAreNotRegistered" xml:space="preserve">
    <value>Sorry, you are not registered.</value>
  </data>
</root>